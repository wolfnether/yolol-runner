grammar_rules = _{SOI ~ (line ~ newline)* ~ line? ~ EOI}

line = {space? ~ stmt ~ (space ~ stmt)*}

stmt = {
    comment
    | assignment
    | if_then_end
    | goto
    }

assignment = {variable ~ assignment_token ~ logical_operation}
assignment_token = {"="| "+="| "-="| "*="| "/="| "^="| "%="}

if_then_end = {"if" ~ logical_operation ~ "then" ~ stmt ~ space? ~ "end"}

goto = {"goto" ~ space? ~ logical_operation}

logical_operation = {additive_expression ~ (logical_operation_token ~ additive_expression)*} 
logical_operation_token = {"or" | "and" | "==" | "!="| ">=" | "<=" | ">" | "<"}
additive_expression = {multiplicative_expression ~ (additive_expression_token ~ multiplicative_expression)*}
additive_expression_token = {"+"|"-"}
multiplicative_expression = {exponentiative_expression~ (multiplicative_expression_token ~ exponentiative_expression)*}
multiplicative_expression_token = {"/"|"*"|"%"}
exponentiative_expression = {primary ~ (exponentiative_expression_token ~ primary)*}
exponentiative_expression_token = {"^"}

primary = {
    ("(" ~ logical_operation ~ ")")
    | variable
    | numerical
    | outer_string
}

variable = {
    outer_global_variable
    |local_variable
}
local_variable = {ASCII_ALPHA ~ ASCII_ALPHANUMERIC*}
outer_global_variable=_{":" ~ global_variable}
global_variable = {ASCII_ALPHA ~ ASCII_ALPHANUMERIC*}

numerical = {"-"? ~ (( ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+) | ASCII_DIGIT+)}
outer_string = _{ "\"" ~ string ~ "\"" }
string = { (!"\"" ~ ANY)*  }

comment = {"//" ~ (!(NEWLINE | EOI) ~ ANY)*}
newline = _{SPACE_SEPARATOR* ~ NEWLINE}
space = _{SPACE_SEPARATOR+}